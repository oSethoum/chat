directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateGroupInput is used for create Group object.
Input was generated by ent.
"""
input CreateGroupInput {
  name: String!
  usergroupIDs: [ID!]
  messageIDs: [ID!]
}
"""
CreateMessageInput is used for create Message object.
Input was generated by ent.
"""
input CreateMessageInput {
  message: String!
  groupID: ID
  userID: ID
}
"""
CreateUserGroupInput is used for create UserGroup object.
Input was generated by ent.
"""
input CreateUserGroupInput {
  groupID: ID
  userID: ID
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  username: String!
  password: String!
  usergroupIDs: [ID!]
  messageIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Group implements Node {
  id: ID!
  updatedAt: Time!
  createdAt: Time!
  name: String!
  usergroups: [UserGroup!]
  messages: [Message!]
}
"""A connection to a list of items."""
type GroupConnection {
  """A list of edges."""
  edges: [GroupEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GroupEdge {
  """The item at the end of the edge."""
  node: Group
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Group connections"""
input GroupOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Groups."""
  field: GroupOrderField!
}
"""Properties by which Group connections can be ordered."""
enum GroupOrderField {
  UPDATED_AT
  CREATED_AT
  NAME
}
"""
GroupWhereInput is used for filtering Group objects.
Input was generated by ent.
"""
input GroupWhereInput {
  not: GroupWhereInput
  and: [GroupWhereInput!]
  or: [GroupWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """userGroups edge predicates"""
  hasUserGroups: Boolean
  hasUserGroupsWith: [UserGroupWhereInput!]
  """messages edge predicates"""
  hasMessages: Boolean
  hasMessagesWith: [MessageWhereInput!]
}
type Message implements Node {
  id: ID!
  sentAt: Time!
  message: String!
  group: Group
  user: User
}
"""A connection to a list of items."""
type MessageConnection {
  """A list of edges."""
  edges: [MessageEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type MessageEdge {
  """The item at the end of the edge."""
  node: Message
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Message connections"""
input MessageOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Messages."""
  field: MessageOrderField!
}
"""Properties by which Message connections can be ordered."""
enum MessageOrderField {
  SENT_AT
  MESSAGE
}
"""
MessageWhereInput is used for filtering Message objects.
Input was generated by ent.
"""
input MessageWhereInput {
  not: MessageWhereInput
  and: [MessageWhereInput!]
  or: [MessageWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """sent_at field predicates"""
  sentAt: Time
  sentAtNEQ: Time
  sentAtIn: [Time!]
  sentAtNotIn: [Time!]
  sentAtGT: Time
  sentAtGTE: Time
  sentAtLT: Time
  sentAtLTE: Time
  """message field predicates"""
  message: String
  messageNEQ: String
  messageIn: [String!]
  messageNotIn: [String!]
  messageGT: String
  messageGTE: String
  messageLT: String
  messageLTE: String
  messageContains: String
  messageHasPrefix: String
  messageHasSuffix: String
  messageEqualFold: String
  messageContainsFold: String
  """group edge predicates"""
  hasGroup: Boolean
  hasGroupWith: [GroupWhereInput!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "chat/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  groups(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Groups returned from the connection."""
    orderBy: GroupOrder

    """Filtering options for Groups returned from the connection."""
    where: GroupWhereInput
  ): GroupConnection!
  messages(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Messages returned from the connection."""
    orderBy: MessageOrder

    """Filtering options for Messages returned from the connection."""
    where: MessageWhereInput
  ): MessageConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
  usersGroups(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for UserGroups returned from the connection."""
    orderBy: UserGroupOrder

    """Filtering options for UserGroups returned from the connection."""
    where: UserGroupWhereInput
  ): UserGroupConnection!
}
"""
UpdateGroupInput is used for update Group object.
Input was generated by ent.
"""
input UpdateGroupInput {
  name: String
  addUserGroupIDs: [ID!]
  removeUserGroupIDs: [ID!]
  addMessageIDs: [ID!]
  removeMessageIDs: [ID!]
}
"""
UpdateMessageInput is used for update Message object.
Input was generated by ent.
"""
input UpdateMessageInput {
  sentAt: Time
  message: String
  clearGroup: Boolean
  groupID: ID
  clearUser: Boolean
  userID: ID
}
"""
UpdateUserGroupInput is used for update UserGroup object.
Input was generated by ent.
"""
input UpdateUserGroupInput {
  clearGroup: Boolean
  groupID: ID
  clearUser: Boolean
  userID: ID
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  username: String
  password: String
  addUserGroupIDs: [ID!]
  removeUserGroupIDs: [ID!]
  addMessageIDs: [ID!]
  removeMessageIDs: [ID!]
}
type User implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  username: String!
  usergroups: [UserGroup!]
  messages: [Message!]
}
"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User
  """A cursor for use in pagination."""
  cursor: Cursor!
}
type UserGroup implements Node {
  id: ID!
  createdAt: Time!
  group: Group
  user: User
}
"""A connection to a list of items."""
type UserGroupConnection {
  """A list of edges."""
  edges: [UserGroupEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserGroupEdge {
  """The item at the end of the edge."""
  node: UserGroup
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for UserGroup connections"""
input UserGroupOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order UserGroups."""
  field: UserGroupOrderField!
}
"""Properties by which UserGroup connections can be ordered."""
enum UserGroupOrderField {
  CREATED_AT
}
"""
UserGroupWhereInput is used for filtering UserGroup objects.
Input was generated by ent.
"""
input UserGroupWhereInput {
  not: UserGroupWhereInput
  and: [UserGroupWhereInput!]
  or: [UserGroupWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """group edge predicates"""
  hasGroup: Boolean
  hasGroupWith: [GroupWhereInput!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
  CREATED_AT
  UPDATED_AT
  USERNAME
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """username field predicates"""
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  """userGroups edge predicates"""
  hasUserGroups: Boolean
  hasUserGroupsWith: [UserGroupWhereInput!]
  """messages edge predicates"""
  hasMessages: Boolean
  hasMessagesWith: [MessageWhereInput!]
}
